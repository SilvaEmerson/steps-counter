{"version":3,"sources":["streams.js","Components/Counter.js","Components/TotalSteps.js","Components/StopTime.js","App.js","serviceWorker.js","index.js"],"names":["baseCounterObs","timer","pipe","map","el","totalStepsSubject","Subject","isStoped","isWalking","counterObs","takeUntil","stopTimeObs","i","Math","floor","CounterClock","props","useState","counter","setCounter","subscribe","step","onClick","next","TotalSteps","totalSteps","setTotalSteps","StopTime","stopTime","setStopTime","stopTimeEv","App","className","Counter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1720abe5.chunk.js","sourcesContent":["import { Subject, timer } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\n\n\nconst baseCounterObs = new timer(0, 1000).pipe(map(el => el + 1));\n\nexport const totalStepsSubject = new Subject();\n\nexport const isStoped = new Subject();\n\nexport const isWalking = new Subject();\n\nexport const counterObs = baseCounterObs.pipe(takeUntil(isStoped));\n\nexport const stopTimeObs = baseCounterObs.pipe(\n  map(i => `${Math.floor(i / 60)}m: ${i % 60}s`),\n  takeUntil(isWalking)\n);\n","import React, { useState } from \"react\";\nimport {\n  counterObs,\n  totalStepsSubject,\n  isStoped,\n  isWalking\n} from \"../streams.js\";\n\nexport function CounterClock(props) {\n  const [counter, setCounter] = useState(0);\n\n  isWalking.subscribe(i => {\n    counterObs.subscribe(step => setCounter(step));\n  });\n\n  return (\n    <div>\n      <h1>{counter === 0 ? \"No only step\" : `${counter} steps!`}</h1>\n      <div>\n        <button onClick={() => isWalking.next(true)}>Play!</button>\n        <button\n          onClick={() => {\n            isStoped.next(true);\n            totalStepsSubject.next(counter);\n          }}\n        >\n          Pause!\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default CounterClock;\n","import React, { useState } from \"react\";\nimport { totalStepsSubject } from \"../streams.js\";\n\n\nexport function TotalSteps(props) {\n\n  const [totalSteps, setTotalSteps] = useState(0);\n\n  totalStepsSubject.subscribe(i => setTotalSteps(totalSteps + i));\n\n  return (\n    <div>\n      <h1>{totalSteps === 0 ? \"No only step at all\" : `${totalSteps} steps at all!`}</h1>\n    </div>\n  );\n};\n\nexport default TotalSteps;\n","import React, { useState } from \"react\";\nimport { stopTimeObs, isStoped, isWalking } from \"../streams.js\";\n\nexport function StopTime(props) {\n  const originalStopTime = \"0 m: 0 s\";\n  const [stopTime, setStopTime] = useState(originalStopTime);\n\n  isStoped.subscribe(i => {\n    stopTimeObs.subscribe(stopTimeEv => setStopTime(stopTimeEv));\n  });\n\n  isWalking.subscribe(i => setStopTime(originalStopTime));\n\n  return (\n    <div>\n      <h1>Stoped time</h1>\n      <h2>{stopTime}</h2>\n    </div>\n  );\n}\n\nexport default StopTime;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport \"./Components/Counter\";\nimport CounterClock from \"./Components/Counter\";\nimport TotalSteps from \"./Components/TotalSteps\";\nimport StopTime from \"./Components/StopTime\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CounterClock />\n        <TotalSteps />\n        <StopTime />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}